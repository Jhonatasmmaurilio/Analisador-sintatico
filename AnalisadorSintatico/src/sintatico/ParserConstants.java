package sintatico;
public interface ParserConstants
{
    int START_SYMBOL = 46;

    int FIRST_NON_TERMINAL    = 46;
    int FIRST_SEMANTIC_ACTION = 77;

    int[][] PARSER_TABLE =
    {
        { -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  5,  8,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1,  6,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1 },
        { -1, -1, -1,  9, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 22, 23, -1, 24, 29, -1, 23, 32, -1, 33, 23, 34, 38, -1, -1, -1, 49, -1, 43, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, 25, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, 31, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, 40, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, 39 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 50, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1 },
        { -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, 51, 51, -1, 51, -1, 51, -1, -1, -1, -1, -1, -1, 51, -1, 51, -1, 51, 51, -1, -1, -1, -1, -1, 51, -1, -1, 52, 54, 55, 53, 56, 57, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, 60, -1, -1, -1, 58, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1 },
        { -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, 64, 64, -1, 64, -1, 64, -1, -1, 63, -1, -1, -1, 64, -1, 64, -1, 64, 64, -1, 61, 62, -1, -1, 64, -1, -1, 64, 64, 64, 64, 64, 64, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1 },
        { -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, 66, 66, -1, 66, -1, 66, -1, -1, 66, 69, -1, -1, 66, -1, 66, -1, 66, 66, -1, 66, 66, 67, 68, 66, -1, -1, 66, 66, 66, 66, 66, 66, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 70, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1 },
        { -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        {   2,  43, 177,  28,  47,  29, 178 },
        {  50,  52, 179,  55,  57 },
        {  43, 181,  49 },
        {   0 },
        {  34,  43, 181,  49 },
        {   3,  43, 182,  37,  44, 183,  28,  51 },
        {   0 },
        {  43, 182,  37,  44, 183,  28,  51 },
        {   0 },
        {   4, 184,  48,  35,  54,  28,  53 },
        {   0 },
        {  48,  35,  54,  28,  53 },
        {   0 },
        {   8 },
        {   5,  43, 185,  56,  28, 186,  47,  28, 187,  55 },
        {   0 },
        {   0 },
        {  26, 188,  48,  35,   8,  27 },
        {   6,  59,  58,   7 },
        {   0 },
        {  28,  59,  58 },
        {  43, 191,  36,  67, 192 },
        {  57 },
        {   0 },
        {   9,  43, 193,  60, 194 },
        {   0 },
        {  26,  67, 195,  61,  27 },
        {   0 },
        {  34,  67, 195,  61 },
        {  10,  67, 197,  11,  59,  62, 198 },
        {   0 },
        { 199,  12,  59 },
        {  13, 200,  67, 201,  14,  59, 202 },
        {  15, 203,  59,  16,  67, 204 },
        {  17, 205,  26,  63,  64,  27 },
        {  43, 206 },
        {   0 },
        {  34,  63,  64 },
        {  18,  26,  65,  66,  27 },
        {  45, 207 },
        {  67, 208 },
        {   0 },
        {  34,  65,  66 },
        {  24, 209,  67,  25,  74,   7, 210 },
        {  44,  76,  35, 211,  59, 212,  75 },
        {  34, 213,  44,  76 },
        {   0 },
        {   0 },
        {  28,  74 },
        {  22,  43, 214,  36,  67, 215,  23,  67, 216,  14,  59, 217 },
        {  69,  68 },
        {   0 },
        {  37,  69, 218 },
        {  40,  69, 219 },
        {  38,  69, 220 },
        {  39,  69, 221 },
        {  41,  69, 222 },
        {  42,  69, 223 },
        {  30,  71,  70 },
        {  31,  71, 224,  70 },
        {  71,  70 },
        {  30,  71, 225,  70 },
        {  31,  71, 226,  70 },
        {  19,  71, 227,  70 },
        {   0 },
        {  73,  72 },
        {   0 },
        {  32,  73, 228,  72 },
        {  33,  73, 229,  72 },
        {  20,  73, 230,  72 },
        {  44, 231 },
        {  26,  67,  27 },
        {  21,  73, 232 },
        { 233,  63 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado \"PROGRAM\"",
        "Era esperado \"CONST\"",
        "Era esperado \"VAR\"",
        "Era esperado \"PROCEDURE\"",
        "Era esperado \"BEGIN\"",
        "Era esperado \"END\"",
        "Era esperado \"INTEGER\"",
        "Era esperado \"CALL\"",
        "Era esperado \"IF\"",
        "Era esperado \"THEN\"",
        "Era esperado \"ELSE\"",
        "Era esperado \"WHILE\"",
        "Era esperado \"DO\"",
        "Era esperado \"REPEAT\"",
        "Era esperado \"UNTIL\"",
        "Era esperado \"READLN\"",
        "Era esperado \"WRITELN\"",
        "Era esperado \"OR\"",
        "Era esperado \"AND\"",
        "Era esperado \"NOT\"",
        "Era esperado \"FOR\"",
        "Era esperado \"TO\"",
        "Era esperado \"CASE\"",
        "Era esperado \"OF\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \";\"",
        "Era esperado \".\"",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \",\"",
        "Era esperado \":\"",
        "Era esperado \":=\"",
        "Era esperado \"=\"",
        "Era esperado \">\"",
        "Era esperado \">=\"",
        "Era esperado \"<\"",
        "Era esperado \"<=\"",
        "Era esperado \"<>\"",
        "Era esperado IDENT",
        "Era esperado INTEIRO",
        "Era esperado LITERAL",
        "<PROGRAMA> inválido",
        "<BLOCO> inválido",
        "<LID> inválido",
        "<REPIDENT> inválido",
        "<DCLCONST> inválido",
        "<LDCONST> inválido",
        "<DCLVAR> inválido",
        "<LDVAR> inválido",
        "<TIPO> inválido",
        "<DCLPROC> inválido",
        "<DEFPAR> inválido",
        "<CORPO> inválido",
        "<REPCOMANDO> inválido",
        "<COMANDO> inválido",
        "<PARAMETROS> inválido",
        "<REPPAR> inválido",
        "<ELSEPARTE> inválido",
        "<VARIAVEL> inválido",
        "<REPVARIAVEL> inválido",
        "<ITEMSAIDA> inválido",
        "<REPITEM> inválido",
        "<EXPRESSAO> inválido",
        "<REPEXPSIMP> inválido",
        "<EXPSIMP> inválido",
        "<REPEXP> inválido",
        "<TERMO> inválido",
        "<REPTERMO> inválido",
        "<FATOR> inválido",
        "<CONDCASE> inválido",
        "<CONTCASE> inválido",
        "<RPINTEIRO> inválido"
    };
}

